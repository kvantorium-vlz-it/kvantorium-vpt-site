@use 'sass:map';
@use 'sass:string';

@use 'theme';
@use 'variables';
@use 'typography';
@use 'utils';
@use 'meta';

/// =========================
/// Colors and gradients
/// =========================
:root {
    @each $key, $color in theme.$colors {
        $css-var-name: utils.css-var-name(map.get(meta.$prefixes, colors), $key);

        #{$css-var-name}: utils.color-to-css-var($color);
    }

    @each $key, $color-map in theme.$shaded-colors {
        @each $shade, $color in $color-map {
            $color-name: #{$key}-#{$shade};
            $css-var-name: utils.css-var-name(map.get(meta.$prefixes, colors), $color-name);

            #{$css-var-name}: utils.color-to-css-var($color);
        }
    }

    @each $key, $gradient in variables.$gradients {
        $gradient-css-var-name: utils.css-var-name(map.get(meta.$prefixes, gradient), $key);

        $var-vertical: '#{$gradient-css-var-name}-vertical';
        $var-horizontal: '#{$gradient-css-var-name}-horizontal';

        #{$var-vertical}: linear-gradient(to bottom, $gradient);
        #{$var-horizontal}: linear-gradient(to right, $gradient);
    }
}

/// =========================
/// Misc variables
/// =========================
:root {
    @each $key, $index in variables.$z-indexes {
        $css-var-name: utils.css-var-name(map.get(meta.$prefixes, z-index), $key);

        #{$css-var-name}: $index;
    }

    @each $key, $radius in variables.$border-radiuses {
        $css-var-name: utils.css-var-name(map.get(meta.$prefixes, border-radius), $key);

        #{$css-var-name}: $radius;
    }

    @each $key, $box-shadow in variables.$box-shadows {
        $css-var-name: utils.css-var-name(map.get(meta.$prefixes, box-shadow), $key);
        $result-bs: '';

        @if (map.get($box-shadow, type) == 'inset') {
            $result-bs: string.insert($result-bs, 'inset ', 0);
        }

        $result-bs: string.insert(
            $result-bs,
            '#{utils.list-rem(map.get($box-shadow, values))} ',
            string.length($result-bs + 1),
        );
        $result-bs: string.insert(
            $result-bs,
            map.get($box-shadow, color),
            string.length($result-bs + 1)
        );

        #{$css-var-name}: #{$result-bs};
    }
}


/// =========================
/// Font weights and sizes
/// =========================
:root {
    @each $key, $font-weight in typography.$font-weights {
        $font-weight-var-name: utils.css-var-name(map.get(meta.$prefixes, font-weight), $font-weight);

        #{$font-weight-var-name}: $font-weight;
    }

    @each $key, $typo in typography.$typography {
        $typo-name: string.slice($key, 0, utils.string-last-index($key, '-') - 1);

        $font-size-css-var: utils.css-var-name(map.get(meta.$prefixes, font-size), $typo-name);

        @each $breakpoint, $font-size in $typo {
            @include utils.from-breakpoint($breakpoint) {
                #{$font-size-css-var}: utils.rem($font-size);
            }
        }
    }

    --#{map.get(meta.$prefixes, font-family)}: #{typography.$font-family};
}

/// =========================
/// High level colors and gradients
/// =========================
:root {
    --bg: var(--c-white);
    --bg-header: var(--c-primary-900);
    --bg-footer: var(--c-primary-900);
    --bg-sidebar: var(--g-primary-vertical);
    --bg-kvantum-card: var(--g-kvantum-card-vertical);

    --text-heading: var(--c-primary-600);
    --text-heading-dark: var(--c-primary-900);
    --text-subheading: var(--c-primary-600);
    --text-body: var(--c-primary-600);
    --text-body-light: var(--c-secondary-700);
}

:root {
    --w-navigation-drawer: #{utils.rem(256px)};
}
