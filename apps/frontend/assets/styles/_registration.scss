@use 'meta' as *;
@use 'utils' as *;

@use 'variables' as *;
@use 'theme' as *;
@use 'typography' as *;

/// Alpha values
@for $alpha-index from 0 through calc(100 / $alpha-step) {
    $alpha-value: calc($alpha-index * $alpha-step);
    $alpha-var-name: css-var-name($alpha-prefix, $alpha-value);

    :root {
        #{$alpha-var-name}: #{percentage(calc($alpha-value / 100))};
    }
}

/// Not shaded colors
@each $key, $color in $colors {
    $color-var-name: css-var-name($colors-prefix, $key);

    :root {
        #{$color-var-name}: color-to-css-var($color);
    }
}

/// Shaded colors
@each $key, $color-map in $shaded-colors {
    @each $shade-key, $color in $color-map {
        $color-name: '#{$key}-#{$shade-key}';
        $color-var-name: css-var-name($colors-prefix, $color-name);

        :root {
            #{$color-var-name}: color-to-css-var($color);
        }
    }
}

/// Font weights
@each $key, $font-weight in $font-weights {
    $font-weight-var-name: css-var-name($font-weight-prefix, $font-weight);

    :root {
        #{$font-weight-var-name}: $font-weight;
    }
}

/// Font sizes
@each $key, $typo in $typography {
    $typo-name: str-slice($key, 0, string-last-index($key, '-') - 1);

    $font-size-css-var: css-var-name($font-size-prefix, $typo-name);

    @each $breakpoint, $font-size in $typo {
        :root {
            @include from-breakpoint($breakpoint) {
                #{$font-size-css-var}: rem($font-size);
            }
        }
    }
}

/// Z indexes
@each $key, $index in $z-indexes {
    $z-index-css-var: css-var-name($z-index-prefix, $key);

    :root {
        #{$z-index-css-var}: $index;
    }
}

/// Border radiuses
@each $key, $radius in $border-radiuses {
    $border-radius-css-var: css-var-name($border-radius-prefix, $key);

    :root {
        #{$border-radius-css-var}: $radius;
    }
}

/// Font family
:root {
    --#{$font-family-prefix}: #{$font-family};
}

/// Box shadows
/// TODO: use alpha css vars for colors
@each $key, $box-shadow in $box-shadows {
    $box-shadow-css-var: css-var-name($box-shadow-prefix, $key);
    $result-bs: '';

    @if (map-get($box-shadow, type) == 'inset') {
        $result-bs: str-insert($result-bs, 'inset ', 0);
    }

    $result-bs: str-insert(
        $result-bs,
        '#{list-rem(map-get($box-shadow, values))} ',
        str-length($result-bs + 1),
    );
    $result-bs: str-insert(
        $result-bs,
        map-get($box-shadow, color),
        str-length($result-bs + 1)
    );

    :root {
        #{$box-shadow-css-var}: #{$result-bs};
    }
}

/// Gradients
@each $key, $gradient in $gradients {
    $gradient-css-var: css-var-name($gradient-prefix, $key);

    $var-vertical: '#{$gradient-css-var}-vertical';
    $var-horizontal: '#{$gradient-css-var}-horizontal';

    :root {
        #{$var-vertical}: linear-gradient(to bottom, $gradient);
        #{$var-horizontal}: linear-gradient(to right, $gradient);
    }
}


:root {
    --bg: var(--c-white);
    --bg-header: var(--c-primary-900);
    --bg-footer: var(--c-primary-900);
    --bg-sidebar: var(--g-primary-vertical);

    --text-heading: var(--c-primary-600);
    --text-heading-dark: var(--c-primary-900);
    --text-subheading: var(--c-primary-600);
    --text-body: var(--c-primary-600);
    --text-body-light: var(--c-secondary-700);

    --w-mobile-sidebar-width: #{px-to-rem(256px)};
}
