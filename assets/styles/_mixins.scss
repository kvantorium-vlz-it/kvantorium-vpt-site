@use 'sass:map' as map;
@use 'sass:list' as list;
@use 'sass:string' as string;
@use '@styles/utils' as *;
@use '@styles/variables' as *;

/// Mixin for generate record for css color var
/// Injects in element var --c-name
///
/// @param { color } color
/// @param { string } name
@mixin register-color($color, $name) {
    --c-#{$name}: #{color-to-var($color)};
}

/// Mixin for generate recors for css color vars from colors map
/// Injects in element vars --c-name-key
///
/// @param { color } color
/// @param { string } name
@mixin register-colors($map, $color-name) {
    @each $color-value, $color in $map {
        $name: '#{#{$color-name}-#{$color-value}}';
        @include register-color($color, $name);
    }
}

/// Mobile to desktop bounds
$mobile-desktop-bounds: breakpoint-bounds(map.get($breakpoints, mobile-desktop));

/// Mixin for apply rules from mobile breakpoint
@mixin from-mobile {
    @content;
}

/// Mixin for apply rules only for mobile
@mixin only-mobile {
    $end: breakpoint-start-bound($mobile-desktop-bounds);
    @media (max-width: $end) {
        @content;
    }
}

/// Mixin for apply rules from desktop breakpoint
@mixin from-desktop {
    $start: breakpoint-start-bound($mobile-desktop-bounds);
    @media (min-width: $start) {
        @content;
    }
}

/// Mixin for apply rules only for desktop
@mixin only-desktop {
    @include from-desktop {
        @content;
    }
}

/// Mixin for register font weight
///
/// @param { weight } font-weight string value font-weight
@mixin register-font-weight($font-weight) {
    $var: get-font-weight-css-var($font-weight);

    #{$var}: $font-weight;
}

/// Mixin for register font weights from map
///
/// @param { ( name: weight ) } font-weight-map map wight weights
@mixin register-font-weights($font-weight-map) {
    @each $name, $weight in $font-weight-map {
        @include register-font-weight($weight);
    }
}

/// Mixin for register font-size based on typography name
///
/// @param { ( font-weight: weight, font-size:( mobile: px, desktop: px ) ) } typography
@mixin register-font-size($typo, $name) {
    $font-size: map.get($typo, font-size);
    $mobile-font-size: px-to-rem(map.get($font-size, mobile));
    $desktop-font-size: px-to-rem(map.get($font-size, desktop));
    $css-var: get-font-size-css-var($name);
    @include from-mobile {
        #{$css-var}: #{$mobile-font-size};
    }
    @include from-desktop {
        #{$css-var}: #{$desktop-font-size};
    }
}

/// Mixin for register font-sizes from typography map
///
/// @param { typography-map } typography
@mixin register-font-sizes($typography-map) {
    @each $name, $typo in $typography-map {
        @include register-font-size($typo, $name);
    }
}

/// Mixin for apply typography using name
///
/// @param { string } typography-name
@mixin typo($name) {
    $typo: map.get($typography, $name);
    /* stylelint-disable-next-line scss/at-if-no-null */
    @if $typo == null {
        @error 'unknown typography';
    }
    /* stylelint-disable-next-line order/order */
    $font-weight: map.get($typo, font-weight);

    font-size: var(#{get-font-size-css-var($name)});
    font-weight: var(#{get-font-weight-css-var($font-weight)});
}

/// Mixin for register border-radius
///
/// @param { radius } border-radius value
/// @param { string } name
@mixin register-border-radius($radius, $name) {
    $var: '--br-#{$name}';
    /* stylelint-disable-next-line scss/at-if-no-null */
    @if string.index('#{$radius}', 'px') == null {
        #{$var}: $radius;
    } @else {
        #{$var}: #{px-to-rem($radius)};
    }
}

/// Mixin for register border-radiuses from map
///
/// @param { ( $name: $radius ) } map
@mixin register-border-radiuses($radius-map) {
    @each $name, $radius in $radius-map {
        @include register-border-radius($radius, $name);
    }
}

/// Mixin for register vertical and horizontal gradient
///
/// @param { colors } gradient-colors
/// @param { string } name
@mixin register-gradient($gradient, $name) {
    $var: '--g-#{$name}';
    $var-vertical: '#{$var}-vertical';
    $var-horizontal: '#{$var}-horizontal';

    #{$var-vertical}:
        linear-gradient(
            to bottom,
            $gradient,
        );
    #{$var-horizontal}:
        linear-gradient(
            to right,
            $gradient,
        );
}

/// Mixin for register gradients from map
///
/// @param { gradient } gradient map
@mixin register-gradients($gradients-map) {
    @each $name, $gradient in $gradients-map {
        @include register-gradient($gradient, $name);
    }
}

/// Mixin for register box-shadow effect
///
/// @param { ( type?: string, values: px[], color: color ) } shadow
/// @param { string } name
@mixin register-box-shadow($shadow, $name) {
    $var: '--bs-#{$name}';
    $result-bs: '';
    @if map.get($shadow, type) == 'inset' {
        $result-bs: string.insert($result-bs, 'inset ', 0);
    }

    /* stylelint-disable-next-line order/order */
    $result-bs: string.insert(
        $result-bs,
        '#{list-px-to-rem(map.get($shadow, values))} ',
        string.length($result-bs + 1),
    );
    $result-bs: string.insert(
        $result-bs,
        map.get($shadow, color),
        string.length($result-bs + 1)
    );

    #{$var}: #{$result-bs};
}

/// Mixin for register box-shadows effects
///
/// @param { shadow-map } map of shadows
@mixin register-box-shadows($shadows-map) {
    @each $name, $shadow in $shadows-map {
        @include register-box-shadow($shadow, $name);
    }
}

/// Mixin for register blur effect
///
/// @param { px } blur
/// @param { string } name
@mixin register-blur($blur, $name) {
    $var: '--b-#{$name}';

    #{$var}: #{px-to-rem($blur)};
}

/// Mixin for register blurs effects
///
/// @param { px() } blurs map
@mixin register-blurs($blurs-map) {
    @each $name, $blur in $blurs-map {
        @include register-blur($blur, $name);
    }
}

/// Mixin for register page section padding on element
/// Sets padding value by default. Can change behaviour by `is-set-padding` flag
///
/// @param { boolean } is-set-padding flag
@mixin page-section-padding($is-set-padding: true) {
    --p-x: #{px-to-rem(16px)};
    --p-y: #{px-to-rem(12px)};
    @if $is-set-padding == true {
        padding: var(--p-y) var(--p-x);
    }
}

/// Mixin for register z-index
///
/// @param { number } index
/// @param { string } name
@mixin register-z-index($index, $name) {
    $var: '--z-#{$name}';

    #{$var}: $index;
}

/// Mixin for register z-indexes from map
///
/// @param { number() } blurs map
@mixin register-z-indexes($indexes-map) {
    @each $name, $index in $indexes-map {
        @include register-z-index($index, $name);
    }
}
