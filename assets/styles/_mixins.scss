@use 'sass:map' as map;
@use '@styles/utils' as *;
@use '@styles/variables' as *;

/// Mixin for generate record for css color var
/// Injects in element var --c-name
///
/// @param { color } color
/// @param { string } name
@mixin register-color($color, $name) {
    --c-#{$name}: #{color-to-var($color)};
}

/// Mixin for generate recors for css color vars from colors map
/// Injects in element vars --c-name-key
///
/// @param { color } color
/// @param { string } name
@mixin register-colors($map, $color-name) {
    @each $color-value, $color in $map {
        $name: '#{#{$color-name}-#{$color-value}}';
        @include register-color($color, $name);
    }
}

/// Mobile to desktop bounds
$mobile-desktop-bounds: breakpoint-bounds(map.get($breakpoints, mobile-desktop));

/// Mixin for apply rules from mobile breakpoint
@mixin from-mobile {
    @content;
}

/// Mixin for apply rules only for mobile
@mixin only-moblie {
    $end: breakpoint-start-bound($mobile-desktop-bounds);
    @media (max-width: $end) {
        @content;
    }
}

/// Mixin for apply rules from desktop breakpoint
@mixin from-desktop {
    $start: breakpoint-start-bound($mobile-desktop-bounds);
    @media (min-width: $start) {
        @content;
    }
}

/// Mixin for apply rules only for desktop
@mixin only-desktop {
    @include from-desktop {
        @content;
    }
}

/// Mixin for register font weight
///
/// @param { weight } font-weight string value font-weight
@mixin register-font-weight($font-weight) {
    $var: get-font-weight-css-var($font-weight);

    #{$var}: $font-weight;
}

/// Mixin for register font weights from map
///
/// @param { ( name: weight ) } font-weight-map map wight weights
@mixin register-font-weights($font-weight-map) {
    @each $name, $weight in $font-weight-map {
        @include register-font-weight($weight);
    }
}

/// Mixin for register font-size based on typography name
///
/// @param { ( font-weight: weight, font-size:( mobile: px, desktop: px ) ) } typography
@mixin register-font-size($typo, $name) {
    $font-size: map.get($typo, font-size);
    $mobile-font-size: px-to-rem(map.get($font-size, mobile));
    $desktop-font-size: px-to-rem(map.get($font-size, desktop));
    $css-var: get-font-size-css-var($name);
    @include from-mobile {
        #{$css-var}: $mobile-font-size;
    }
    @include from-desktop {
        #{$css-var}: $desktop-font-size;
    }
}

/// Mixin for register font-sizes from typography map
///
/// @param { typography-map } typography
@mixin register-font-sizes($typography-map) {
    @each $name, $typo in $typography-map {
        @include register-font-size($typo, $name);
    }
}

/// Mixin for apply typography using name
///
/// @param { string } typography-name
@mixin typo($name) {
    $typo: map.get($typography, $name);
    $font-weight: map.get($typo, font-weight);

    font-size: var(#{get-font-size-css-var($name)});
    font-weight: var(#{get-font-weight-css-var($font-weight)});
}
